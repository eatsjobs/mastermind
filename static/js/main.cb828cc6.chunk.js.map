{"version":3,"sources":["components/Inputs.jsx","components/Button.jsx","screens/Game.jsx","screens/GameOver.jsx","screens/Home.jsx","routes.jsx","App.js","serviceWorker.js","utils/Platform.js","stores/Player.js","stores/LeaderBoard.js","stores/GameStore.js","utils/checkAttempt.js","utils/generateSecretCode.js","utils/calculateScore.js","index.js"],"names":["FormContainer","styled","form","_templateObject","BACK_SPACE","Inputs","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_validate","value","min","max","isNaN","_value","Number","_max","onChange","evt","persist","_evt$target","target","dataset","console","log","name","index","parseInt","id","newValues","toConsumableArray","state","values","isRowValid","every","v","setState","onKeyUp","preventDefault","charCode","key","concat","focus","onSubmit","map","onEntered","refSubmitButton","React","createRef","initialValues","inherits","createClass","prevProps","blur","_this2","_this$props","disabled","played","_this$state","react_default","a","createElement","autoComplete","i","onFocus","aria-label","data-id","ref","node","type","components_Button","size","Component","defaultProps","readOnly","Button","button","Button_templateObject","css","_templateObject2","GameContainer","div","Game_templateObject","Table","table","Game_templateObject2","HeadRow","_templateObject3","Message","_templateObject4","Game","gotToGameOver","history","push","onInputsEnter","_ref","gameStore","playAttempt","hasFinished","hasStarted","currentRow","remainingAttempts","attempts","style","fontSize","_","className","undefined","Inputs_Inputs","display","flex","textAlign","whites","blacks","width","onClick","inject","observer","ButtonsContainer","GameOver_templateObject","MainContainer","GameOver_templateObject2","LeaderBoard","items","length","player","GameOver","onRestart","start","onBack","_this$props2","reset","_this$props3","leaderBoardStore","currentPlayer","hasWon","currentSecretCode","join","GameOver_LeaderBoard","getRanking","InputContainer","Home_templateObject","ButtonContainer","Home_templateObject2","Home","maxAttempts","difficulty","setPlayerName","startGame","htmlFor","Routes","react_router_dom","basename","process","react_router","exact","path","component","Header","header","App_templateObject","Footer","footer","App_templateObject2","Page","App_templateObject3","App","apply","arguments","routes","Boolean","window","location","hostname","match","navigator","userAgent","Android","BlackBerry","iOS","Windows","Player","addScore","game","games","uuid","Math","score","slice","decorate","observable","leaderBoardInstance","save","load","players","find","u","newPlayer","_ref$top","top","sort","u1","u2","Attempt","Array","fill","GameStore","_ref2","attempt","_checkAttempt","code","secret","guess","white","black","j","rightNumberRightPlace","rightNumberWrongPlace","checkAttempt","endDateTime","Date","serialize","_ref$difficulty","random","generateSecretCode","createInitialAttempts","now","startDateTime","moves","duration","secretCode","sqrt","round","pow","calculateScore","filter","computed","action","render","index_module","LeaderBoardStore","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb828cc6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n//import { Platform } from '../utils';\nimport { Button } from './';\n\nconst FormContainer = styled.form`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    & input {\n        color: white;\n        text-align: center;\n        font-family: monospace;\n        font-size: 1em;\n        max-width: 50px;\n        width: 100%;\n        background: transparent;\n        outline: none;\n        border: none;\n        border-bottom: 1px solid rgb(200,200,200);\n        margin: 0px 1.5px\n    }\n    & input::-webkit-outer-spin-button, & input[type=\"number\"]::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n    }\n\n    & input[type='number'] {\n        -moz-appearance: textfield;\n    }\n    \n    & input:focus {\n        border-bottom: 1px solid rgb(255,255,255);\n    }\n    & input:read-only, & input:disabled {\n        background: gray;\n    }\n    & input[readonly] {\n        pointer-events: none;\n    }\n`;\n\nconst BACK_SPACE = 'Backspace';\n//const ENTER = 'Enter';\nexport class Inputs extends Component {\n    static defaultProps = {\n        readOnly: false,\n        initialValues: [],\n        focus: false\n    }\n    constructor(props) {\n        super(props);\n        this.refSubmitButton = React.createRef();\n        this.state = {\n            values: this.props.initialValues,\n            isRowValid: false\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.focus) {\n            this[`input0`].focus();\n        }\n    }\n    \n    _validate = (value, min, max) => {\n        if (isNaN(value)) {\n            return false;\n        }\n        const _value = Number(value);\n        const _max = Number(max);\n        const _min = Number(min);\n        if (_value >= _min && _value <= _max) {\n            return true;\n        }\n        return false;\n    }\n\n    onChange = (evt) => {\n        evt.persist();\n        const { \n            dataset,\n            value, \n            min,\n            max\n        } = evt.target;\n        if (!this._validate(value, min, max)) {\n            return false;\n        }\n        \n        console.log({ name: 'onChange', evt, value, min, max, dataset });\n        const index = parseInt(dataset.id);\n        let newValues = [ \n            ...this.state.values\n        ];\n\n        newValues[index] = value;\n        const isRowValid = newValues.every((v) => {\n            if (typeof v === 'undefined' || v === '') {\n                return false;\n            } else {\n                return this._validate(v, min, max);\n            }\n        });\n        this.setState({ \n            values: newValues, \n            isRowValid\n        });\n    }\n\n    onKeyUp = (evt) => {\n        evt.preventDefault();\n        const { dataset } = evt.target;\n        const { charCode, key } = evt;\n        const index = parseInt(dataset.id);\n        console.log({ name: 'onKeyUp', evt, charCode, key });\n        if (key === BACK_SPACE) {\n            if (this[`input${index - 1}`]) {\n                this[`input${index - 1}`].focus()\n            } \n        } else if (!isNaN(key)) { //number pressed? give focus to the next if\n            if (this[`input${index + 1}`]) {\n                this[`input${index + 1}`].focus();\n            } else {\n                // this.refSubmitButton.current.focus();\n            }\n        }\n    }\n    \n    onSubmit = (evt) => {\n        evt.preventDefault();\n        const values = this.state.values.map((v) => parseInt(v, 10));\n        this.props.onEntered({ values, id: this.props.id });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.focus !== this.props.focus) {\n            if (this.props.focus) {\n                this[`input0`].focus();\n            } else {\n                this[`input0`].blur();\n            }\n        }\n    }\n\n    render() {\n        const { disabled, played } = this.props;\n        const { values, isRowValid } = this.state;\n        return <FormContainer\n            autoComplete='off'\n            onSubmit={this.onSubmit}\n        >\n            {values.map((value, i) => {\n                return <input\n                    onFocus={this.onFocus}\n                    autoComplete='off'\n                    aria-label={`input_${i}`}\n                    data-id={i}\n                    key={i}\n                    value={value}\n                    name={`input_${i}`}\n                    onKeyUp={this.onKeyUp}\n                    onChange={this.onChange}\n                    disabled={disabled}\n                    ref={(node) => this[`input${i}`] = node}\n                    type='number'\n                    min='0'\n                    max='9'\n                />\n            })}\n            <Button size='s' ref={this.refSubmitButton} type='submit' disabled={played || !isRowValid}>CheckRow</Button>\n        </FormContainer>\n    }\n}","import styled, { css } from 'styled-components';\nconst Button = styled.button`\n    border-radius: 3px;\n    padding: 0.5rem 0;\n    width: 11rem;\n    ${props => {\n        return props.size === 's' && css`\n            width: 7rem\n        `;\n    }};\n    background: transparent;\n    color: white;\n    border: 2px solid white;\n    cursor: pointer;\n    transition: background .2s ease;\n    outline:none;\n    &:hover:not([disabled]) {\n        background: white;\n        color: black;\n    }\n    &:focus:not([disabled]) {\n        box-shadow:0 0 10px #9ecaed;\n    }\n    &:disabled {\n        color: gray;\n        border: 2px solid gray;\n        opacity: 0.85;\n    }\n`;\n\nexport default Button;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport { Inputs, Button } from '../components';\nimport { observer, inject } from 'mobx-react';\n\nconst GameContainer = styled.div`\n  max-width: 700px;\n  width: 100%;\n`;\n\nconst Table = styled.table`\n    width: 100%;\n    min-height: 350px;\n    background: rgba(255,255,255, 0.3);\n    padding: 1rem 2rem;\n    border-radius: 10px;\n\n    & tbody tr {\n        opacity: 0.35;\n    }\n    & tbody tr.active {\n        opacity: 1;\n        & td:first-child {\n            width: 80%;\n        }\n        & td:last-child {\n            width: 20%;\n        }\n    }\n\n    & tr td {\n\n    }\n\n    & tfoot tr td {\n        text-align: center;\n    }\n`;\n\nconst HeadRow = styled.div`\n    display: flex; \n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Message = styled.div`\n    font-size: .8rem;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    text-align: left;\n    font-size: .8rem;\n`;\n\nclass Game extends Component {\n\n    componentDidMount() {\n        const { gameStore } = this.props;\n        if (!gameStore.hasStarted) {\n            this.props.history.push('/');\n        }\n    }\n\n    gotToGameOver = () => {\n        this.props.history.push('/gameover');\n    }\n\n    onInputsEnter = ({ values, id }) => {\n        console.log('onInputs',{ values, id });\n        const { gameStore } = this.props;\n        gameStore.playAttempt({ values });\n        if (gameStore.hasFinished) {\n            this.gotToGameOver();\n        }\n    }\n\n    render() {\n        const { gameStore } = this.props;\n        const { currentRow, remainingAttempts, attempts } = gameStore;\n        return (<GameContainer>\n            <HeadRow>\n                <Message>\n                    Remaining Attempts {remainingAttempts}\n                </Message>\n            </HeadRow>\n            <Table>\n            <thead>\n                <tr>\n                    <th>Attempts</th>\n                    <th>\n                        <div>Results:</div>\n                        <div style={{ fontSize: '.7rem' }}>Right Number and Place | Wrong Place</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {attempts.map((_, i) => {\n                    return <tr className={currentRow === i ? 'active' : undefined} key={i}>\n                        <td>\n                            <Inputs\n                                focus={currentRow === i}\n                                initialValues={attempts[i].values}\n                                id={i}\n                                onEntered={this.onInputsEnter} \n                                disabled={currentRow !== i}\n                                played={attempts[i].played}\n                            />\n                        </td>\n                        <td>\n                            <div style={{ display: 'flex' }}>\n                                <span style={{ flex: 1, textAlign: 'center' }}>\n                                    {attempts[i].whites}\n                                </span>\n                                <span style={{ flex: 1, textAlign: 'center' }}>\n                                    {attempts[i].blacks}\n                                </span>\n                            </div>\n                        </td>\n                    </tr>\n                })}\n        </tbody>\n        <tfoot>\n            <tr>\n                <td style={{ width: '70%' }}>\n                    {/*<Inputs\n                        length={this.state.currentSecretCode.length}\n                        id='secret'\n                        readOnly={true}\n                    />*/}\n                </td>\n                <td style={{ width: '30%' }}>\n                    <Button \n                        onClick={this.gotToGameOver}>\n                        Show Solution\n                    </Button>\n                </td>\n            </tr>\n        </tfoot>\n        </Table>\n    </GameContainer>)\n    }\n}\n\nexport default inject('gameStore')(observer(Game));","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { Button } from '../components';\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  & ${Button}:first-child {\n    margin-right: 5px;\n  } \n`;\n\nconst MainContainer = styled.div`\n  max-width: 700px;\n  background: rgba(255,255,255,0.3);\n  min-height: 150px;\n  border-radius: 5px;\n  padding: 1rem 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin-top: 5px;\n`;\n\nclass LeaderBoard extends Component {\n  render() {\n    const { items } = this.props;\n    return (<div>\n        <div style={{ textAlign: 'center' }}>Top 5</div>\n        {items.length > 0 ? <ol>\n          {items.map((player) => {\n            console.log(player);\n            return <li>\n              <div>{player.name}</div>\n              <div>{player.max}</div>\n            </li>\n          })}\n        </ol> : <span>still empty :(</span>}\n    </div>)\n  }\n}\n\nclass GameOver extends Component {\n  \n  onRestart = () => {\n    const { history, gameStore } = this.props;\n    gameStore.start();\n    history.push('/play');\n  }\n\n  onBack = () => {\n    const { history, gameStore } = this.props;\n    gameStore.reset();\n    history.push('/');\n  }\n\n  render() {\n    const { gameStore, leaderBoardStore } = this.props;\n    return <div>\n      <MainContainer>\n        <div>\n          <div>\n            {gameStore.currentPlayer.name}\n          </div>\n          <div>\n            <div>\n            {gameStore.currentPlayer} {gameStore.hasWon ? 'WON!' : 'LOOSE'}\n            </div>\n            <div>\n              Solution was: {gameStore.currentSecretCode.join(', ')}\n            </div>\n          </div>\n        </div>\n        <ButtonsContainer>\n          <Button onClick={this.onRestart}>Restart</Button>\n          <Button onClick={this.onBack}>Go To Home</Button>\n        </ButtonsContainer>\n      </MainContainer>\n      <MainContainer>\n        <LeaderBoard items={leaderBoardStore.getRanking()} />\n      </MainContainer>\n    </div>\n  }\n}\n\nexport default inject('gameStore', 'leaderBoardStore')(observer(GameOver));","import React, { Component } from 'react';\nimport { observer, inject } from 'mobx-react';\nimport styled from 'styled-components';\nimport { Button } from '../components';\n\nconst InputContainer = styled.div`\n  display: flex;\n  margin-bottom: 5px;\n  & label {\n    flex: 1;\n  }\n  & input {\n    flex: 1;\n    margin-left: 5px;\n  }\n`;\n\nconst ButtonContainer = styled.div`\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nclass Home extends Component {\n\n  onChange = (evt) => {\n    const { gameStore } = this.props;\n    const { name, value } = evt.target;\n    if (name === 'attempts') {\n      gameStore.maxAttempts = parseInt(value, 10);\n    } else if(name === 'difficulty') {\n      gameStore.difficulty = parseInt(value, 10);\n    } else if (name === 'player') {\n      gameStore.setPlayerName({ name: value });\n    }\n  }\n\n  startGame = () => {\n    const { gameStore } = this.props;\n    gameStore.start();\n    this.props.history.push('/play');\n  }\n\n  render() {\n    const { gameStore } = this.props;\n    console.log({ gameStore });\n    return <div>\n      <InputContainer>\n        <label htmlFor='difficulty'>\n          Difficulty:\n        </label>\n        <input\n          type='number'\n          min={3}\n          value={gameStore.difficulty}\n          name='difficulty'\n          onChange={this.onChange}\n        />\n      </InputContainer>\n      <InputContainer>\n        <label htmlFor='attempts'>\n          Max attempts:\n        </label>\n        <input\n          type='number'\n          value={gameStore.maxAttempts}\n          min={3}\n          name='attempts'\n          onChange={this.onChange}\n        />\n      </InputContainer>\n      <InputContainer>\n        <label htmlFor='attempts'>\n          PlayerName:\n        </label>\n        <input\n          type='text'\n          name='player'\n          value={gameStore.currentPlayer}\n          onChange={this.onChange}\n        />\n      </InputContainer>\n      <ButtonContainer>\n        <Button onClick={this.startGame}>\n          Start\n        </Button>\n      </ButtonContainer>\n    </div>\n  }\n}\n\nexport default inject('gameStore')(observer(Home));","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Game, Home, GameOver } from './screens';\nconst Routes = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route exact path='/' component={Home} />\n    <Route path='/play' component={Game} />\n    <Route path='/gameover' component={GameOver} />\n  </Router>\n);\n\nexport default Routes;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport routes from './routes';\nconst Header = styled.header`\n  & h1 {\n    margin: 0;\n    padding: 0;\n    font-family: monospace;\n  }\n`;\n\nconst Footer = styled.footer`\n  font-size: 10px;\n  padding: 10px 0px;\n`;\n\nexport const Page = styled.div`\n    background-color: #282c34;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    height: 100%;\n    overflow: hidden auto;\n    font-size: calc(10px + 2vmin);\n    color: white;\n`;\nexport class App extends Component {\n  render() {\n    return (\n        <Page>\n          <Header>\n            <h1>MasterMind!</h1>\n          </Header>\n          {routes}\n          <Footer>\n            <strong>madeBy @eatsjobs</strong>, 2019\n          </Footer>\n        </Page>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","class Platform {\n    Android() {\n        return navigator.userAgent.match(/Android/i);\n    }\n\n    BlackBerry() {\n        return navigator.userAgent.match(/BlackBerry/i);\n    }\n\n    iOS() {\n        return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    }\n\n    Windows(){\n        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);\n    }\n    \n    isMobile() {\n        return (this.Android() || this.BlackBerry() || this.iOS() || this.Windows());\n    }\n}\n\nconst platform = new Platform();\nexport default platform;","import { observable, decorate } from 'mobx';\n\nclass Player {\n  static uuid = 0;\n  constructor(name) {\n      this.name = name;\n      this.uuid = ++Player.uuid;\n      this.games = [];\n  }\n  \n  addScore = (game) => {\n    this.games.push(game);\n  }\n\n  get max() {\n      return Math.max(...this.games.map(game => game.score));\n  }\n\n  get average() {\n    return 0;\n  }\n  \n  get lastGame() {\n      return this.games.slice(-1)[0];\n  }\n}\n\ndecorate(Player, {\n    name: observable\n});\n\nexport default Player;","//import { observable, decorate } from 'mobx';\nimport Player from './Player';\n\nclass LeaderBoard {\n  constructor() {\n    this.players = [];\n  }\n  \n  save = () => {\n\n  }\n\n  load = () => {\n\n  }\n\n  \n  addScore(name, game) {\n    // if a player with the same name already played...\n    let player = this.players.find(u => u.name === name);\n    if (player) {\n      return player.addScore(game);\n    } else {\n      let newPlayer = new Player(name);\n      newPlayer.addScore(game);\n      this.players.push(newPlayer);\n    };\n  }\n\n  // get the top five by default\n  getRanking({ top = 5 } = {}) {\n    return this.players.sort((u1, u2) => u2.max - u1.max).slice(0, top);\n  }\n}\nconst leaderBoardInstance = new LeaderBoard();\nexport default leaderBoardInstance;","import { \n  generateSecretCode,\n  checkAttempt,\n  calculateScore\n} from '../utils';\nimport { observable, computed, action, decorate } from 'mobx';\nimport LeaderBoard from './LeaderBoard';\n\nclass Attempt {\n  constructor(difficulty) {\n    this.values = new Array(difficulty).fill('');\n    this.whites = 0;\n    this.blacks = 0;\n    this.played = false;\n  }\n}\n\ndecorate(Attempt, {\n  values: observable,\n  whites: observable,\n  blacks: observable,\n  played: observable\n});\n\n\nfunction createInitialAttempts({ maxAttempts, difficulty }) {\n  return new Array(maxAttempts).fill(1).map(() => {\n    return new Attempt(difficulty);\n  });\n}\n\nexport default class GameStore {\n  constructor() {\n    this.currentRow = 0;\n    this.difficulty = 4;\n    this.maxAttempts = 15;\n    this.hasWon = false;\n    this.hasStarted = false;\n    this.hasFinished = false;\n    this.score = 0;\n    this.currentPlayer = 'Anonymous';\n    this.currentSecretCode = [];\n    this.attempts = [];\n  }\n\n  // computed\n  get remainingAttempts() {\n    return this.attempts.filter((attempt) => !attempt.played).length;\n  }\n\n  // action\n  playAttempt = ({ values }) => {\n    let attempt = this.attempts[this.currentRow];\n    attempt.values = values;\n    const { \n        rightNumberRightPlace,\n        rightNumberWrongPlace\n    } = checkAttempt({ \n      attempt: values,\n      code: this.currentSecretCode\n    });\n    \n    attempt.whites = rightNumberRightPlace;\n    attempt.blacks = rightNumberWrongPlace;\n    attempt.played = true;\n\n    this.attempts[this.currentRow] = attempt;\n    if (attempt.whites === this.difficulty) {\n        this.hasFinished = true;\n        this.hasStarted = false;\n        this.hasWon = true;\n        this.endDateTime = new Date();        \n        LeaderBoard.addScore(this.currentPlayer, this.serialize());\n        return;\n    }\n    if (this.remainingAttempts === 0) {\n      this.hasStarted = false;\n      this.hasFinished = true;\n      return;\n    }\n    this.currentRow++;\n  }\n\n\n  setPlayerName = ({ name } = {}) => {\n    this.currentPlayer = name;\n  }\n\n  // action\n  start = () => {\n    this.currentSecretCode = generateSecretCode({ difficulty: this.difficulty });\n    this.attempts = createInitialAttempts({ maxAttempts: this.maxAttempts, difficulty: this.difficulty });\n    this.currentRow = 0;\n    this.hasWon = false;\n    this.hasFinished = false;\n    this.hasStarted = true;\n    this.score = 0;\n    const now = new Date();\n    this.startDateTime = now;\n    this.endDateTime = now;\n  }\n\n  reset = () => {\n    this.currentSecretCode = [];\n    this.difficulty = 4;\n    this.maxAttempts = 15;\n    this.attempts = [];\n    this.currentRow = 0;\n    this.score = 0;\n    this.hasWon = false;\n    this.hasFinished = false;\n    this.hasStarted = false;\n    this.currentPlayer = 'Anonymous';\n  }\n\n  serialize = () => {\n    \n    const game = {\n      moves: this.currentRow,\n      difficulty: this.difficulty,\n      hasWon: this.hasWon,\n      duration: this.endDateTime - this.startDateTime,\n      secretCode: this.currentSecretCode,\n      startDateTime: this.startDateTime,\n      endDateTime: this.endDateTime,\n      score: this.score\n    };\n    game.score = calculateScore(game);\n    return game;\n  }\n}\n\ndecorate(GameStore, {\n    remainingAttempts: computed,\n    start: action,\n    playAttempt: action,\n    setPlayerName: action,\n    reset: action,\n    currentPlayer: observable,\n    hasWon: observable,\n    hasFinished: observable,\n    currentRow: observable,\n    attempts: observable,\n    maxAttempts: observable,\n    difficulty: observable\n})\n","/**\n * @param {Object} params\n * @param {Array} params.attempt - the user input code\n * @param {Array} params.code - the code generate once the game started\n */\nexport function check({ attempt, code } = {}) {\n    if (attempt.length !== code.length) {\n        return false\n    }\n    const length = code.length;\n    const secret = code.slice();\n    const guess = attempt.slice();\n    let white = 0, black = 0, i = 0, j = 0;\n    for (i = 0; i < length; i++) {\n        if (secret[i] === guess[i] ) {\n            secret[i] = -1;\n            black++;\n            continue;\n        }\n\n        for (j = 0; j < length; j++) {\n            if (secret[j] === guess[i]) {\n                if (secret[j] === guess[j]) {\n                    black++;\n                } else {\n                    white++;\n                }\n                secret[j] = -1;\n                break;\n            }\n        }\n    }\n    return {\n        rightNumberRightPlace: black,\n        rightNumberWrongPlace: white,\n        black,\n        white\n    }\n}","/**\n * @param {Object} params - the params\n * @param {Number} [params.difficulty=3] - the difficulty of the code\n * @returns {Array}\n */\nexport function generateSecretCode({ difficulty = 3 } = {}) {\n    let code = [];\n    for (let i = 0; i < difficulty; i++) {\n        code.push(parseInt((Math.random() * 9)));\n    }\n    return code;\n}","export function calculateScore({ difficulty, duration }) {\n    /** TODO: better algo? */\n    const { sqrt, round, pow } = Math;\n    \n    const seconds = (duration / 1000);\n    const time = (1 / sqrt(seconds)) * 10;\n    const finalScore = time + (pow(difficulty, 5));\n    return round(finalScore);\n}","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport { GameStore, LeaderBoardStore } from './stores';\nconst gameStore = new GameStore();\nrender(\n    <Provider gameStore={gameStore} leaderBoardStore={LeaderBoardStore}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}