{"version":3,"sources":["components/Inputs.jsx","utils/generateSecretCode.js","screens/Game.jsx","utils/checkAttempt.js","screens/GameOver.jsx","screens/Home.jsx","routes.jsx","App.js","serviceWorker.js","index.js"],"names":["InputsContainer","styled","div","_templateObject","Inputs","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","evt","value","parseInt","target","id","dataset","isNaN","values","concat","focus","onEntered","blur","inherits","createClass","key","_this2","readOnly","react_default","a","createElement","Array","length","fill","map","v","i","aria-label","data-id","name","ref","node","type","maxLength","Component","generateSecretCode","_ref$difficulty","arguments","undefined","difficulty","code","push","Math","random","defaultProps","GameContainer","Game_templateObject","Table","table","_templateObject2","HeadRow","_templateObject3","Button","button","_templateObject4","Message","_templateObject5","Game","onInputsEnter","_ref","_this$setState","currentSecretCode","state","_checkAttempt","attempt","k","rightNumbersRightPlace","filter","rightNumbersWrongPlace","j","indexOf","rightNumberRightPlace","rightNumberWrongPlace","checkAttempt","winning","console","log","setState","defineProperty","remainingAttempts","currentRow","_this$props$location$","location","attempts","_this$props$location$2","maxAttempts","_this$state","style","textAlign","fontSize","onClick","_","className","width","Inputs_Inputs","display","flex","GameOver","react_router_dom","to","Home","pathname","Routes","react_router","exact","path","component","Header","header","App_templateObject","Footer","footer","App_templateObject2","Container","App_templateObject3","App","apply","routes","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.505ba2e9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst InputsContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    & input {\n        text-align: center;\n        font-family: monospace;\n        font-size: 1em;\n        max-width: 50px;\n        width: 100%;\n        background: transparent;\n        outline: none;\n        border: none;\n        border-bottom: 1px solid black;\n        margin: 0px 1.5px\n    }\n    \n    & input:focus {\n        border-bottom: 1px solid green;\n    }\n    & input:read-only {\n        background: gray;\n    }\n    & input[readonly] {\n        pointer-events: none;\n    }\n`\n\nexport class Inputs extends Component {\n    static defaultProps = {\n        readOnly: false,\n        length: 3\n    }\n    constructor(props) {\n        super(props);\n        this.values = [];\n    }\n\n    componentDidMount() {\n\n    }\n\n    onChange = (evt) => {\n        const value = parseInt(evt.target.value);\n        const id = parseInt(evt.target.dataset.id);\n        if (!isNaN(value)) {\n            this.values[id] = value;\n            if (this[`input${id + 1}`]) {\n                // focus next input if exist\n                this[`input${id + 1}`].focus();\n            } else {\n                this.props.onEntered({ values: this.values, id: this.props.id });\n                this.values = [];\n                this[`input${id}`].blur();\n            }\n        }\n    }\n\n    render() {\n        const { readOnly } = this.props;\n        return <InputsContainer>\n            {new Array(this.props.length).fill(1).map((v, i) => {\n                return <input\n                    aria-label={`attempt_${i}`}\n                    data-id={i}\n                    key={i}\n                    name={`attempt_${i}`}\n                    onChange={this.onChange}\n                    readOnly={readOnly}\n                    ref={(node) => this[`input${i}`] = node}\n                    type='text'\n                    maxLength={1}\n                />\n            })}\n        </InputsContainer>\n    }\n}","/**\n * @param {Object} params - the params\n * @param {Number} [params.difficulty=3] - the difficulty of the code\n * @returns {Array}\n */\nexport function generateSecretCode({ difficulty = 3 } = {}) {\n    let code = [];\n    for (let i = 0; i < difficulty; i++) {\n        code.push(parseInt((Math.random() * 9)));\n    }\n    return code;\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport { Inputs } from '../components';\nimport { checkAttempt, generateSecretCode } from '../utils';\n\nconst GameContainer = styled.div`\n  max-width: 700px;\n  min-height: 500px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow-x: auto;\n  \n`;\n\nconst Table = styled.table`\n    width: 100%;\n    min-height: 350px;\n    background: #7c8aa5;\n    padding: 1em 0em;\n    & tbody tr {\n        opacity: 0.35;\n    }\n    & tbody tr.active {\n        opacity: 1;\n    }\n\n    & tr td {\n\n    }\n\n    & tfoot tr td {\n        text-align: center;\n    }\n`;\n\nconst HeadRow = styled.div`\n    display: flex; \n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Button = styled.button`\n    border-radius: 3px;\n    padding: 0.5rem 0;\n    width: 11rem;\n    background: transparent;\n    color: white;\n    border: 2px solid white;\n`;\n\nconst Message = styled.div`\n    font-size: .8rem;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        const { attempts, difficulty } = this.props.location.state;\n        console.log({attempts, difficulty });\n        this.state = {\n            currentRow: 0,\n            remainingAttempts: attempts,\n            currentSecretCode: generateSecretCode({ difficulty })\n        }\n    }\n    \n    onInputsEnter = ({ values, id }) => {\n        const { currentSecretCode } = this.state;\n        const { difficulty } = this.props;\n        const { rightNumberRightPlace, rightNumberWrongPlace } = checkAttempt({ \n            attempt: values, \n            code: this.state.currentSecretCode\n        });\n\n        let winning = false;\n        \n        if (rightNumberRightPlace === difficulty) {\n            winning = true\n        }\n        console.log({ rightNumberRightPlace, rightNumberWrongPlace, currentSecretCode });\n        this.setState({ \n            [id]: {\n                rightNumberRightPlace,\n                rightNumberWrongPlace,\n                readOnly: true\n            },\n            remainingAttempts: this.state.remainingAttempts - 1,\n            currentRow: this.state.currentRow + 1,\n            winning\n        });\n    }\n\n    render() {\n        const { \n            difficulty, \n            attempts: maxAttempts \n        } = this.props.location.state;\n        const { currentRow, remainingAttempts, winning } = this.state;\n        return (<GameContainer>\n            <HeadRow>\n                <Message style={{ textAlign: 'left', fontSize: '.8rem' }}>\n                    Remaining Attempts {remainingAttempts}\n                </Message>\n                <Button onClick={() => {}}>Restart</Button>\n            </HeadRow>\n            \n            <Table>\n            <thead>\n                <tr>\n                    <th>Attempts</th>\n                    <th>\n                        Results:\n                        <div style={{ fontSize: '.4rem' }}>Right Number and Place | Wrong Place</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {new Array(maxAttempts).fill(1).map((_, i) => {\n                    return <tr className={currentRow === i ? 'active' : undefined} key={i}>\n                        <td style={{ width: '70%' }}>\n                            <Inputs\n                                length={difficulty}\n                                id={`attempt_${i}`}\n                                onEntered={this.onInputsEnter} \n                                readOnly={currentRow !== i}\n                            />\n                        </td>\n                        <td style={{ width: '30%' }}>\n                            <div style={{ display: 'flex' }}>\n                                <span style={{ flex: 1, textAlign: 'center' }}>\n                                    {this.state[`attempt_${i}`] ? this.state[`attempt_${i}`].rightNumberRightPlace : 0}\n                                </span>\n                                <span style={{ flex: 1, textAlign: 'center' }}>\n                                    {this.state[`attempt_${i}`] ? this.state[`attempt_${i}`].rightNumberWrongPlace : 0}\n                                </span>\n                            </div>\n                        </td>\n                    </tr>\n                })}\n        </tbody>\n        <tfoot>\n            <tr>\n                <td style={{ width: '70%' }}>\n                    <Inputs\n                        length={this.state.currentSecretCode.length}\n                        id='secret'\n                        readOnly={true}\n                    />\n                </td>\n                <td style={{ width: '30%' }}>\n                    <Button>Show Solution</Button>\n                </td>\n            </tr>\n        </tfoot>\n        </Table>\n    </GameContainer>)\n    }\n}","/**\n * @param {Object} params\n * @param {Array} params.attempt - the user input code\n * @param {Array} params.code - the code generate once the game started\n */\nexport function checkAttempt({ attempt, code } = {}) {\n    if (attempt.length !== code.length) {\n        return false\n    }\n    // TODO: write better?\n    let rightNumbersRightPlace = code.filter((v,i) => v === attempt[i]);\n    let k;\n    let rightNumbersWrongPlace = code.filter((v, j) => {\n        k = attempt.indexOf(v);\n        /** \n            Is in attempt, is not at the same position, it's not already in the rightNumbersRightPlace array\n        */\n        return k > -1 && k !== j && rightNumbersRightPlace.indexOf(v) === -1;\n    })\n    \n    return {\n        rightNumberRightPlace: rightNumbersRightPlace.length,\n        rightNumberWrongPlace: rightNumbersWrongPlace.length\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nexport default class GameOver extends Component {\n  render() {\n    return <div>\n      <div>\n        <Link to='/'>Go To Home</Link>\n      </div>\n    </div>\n  }\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nexport default class Home extends Component {\n  render() {\n    return <div>\n      <div>\n      </div>\n      <div>\n        <Link to={{\n          pathname: '/play',\n          state: {\n            difficulty: 3,\n            attempts: 10\n          }\n        }}>Start</Link>\n      </div>\n    </div>\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Game, Home, GameOver } from './screens';\nconst Routes = (\n  <Router>\n    <Route exact path='/' component={Home} />\n    <Route path='/play' component={Game} />\n    <Route path='/gameover' component={GameOver} />\n  </Router>\n);\n\nexport default Routes;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport routes from './routes';\nconst Header = styled.header`\n  & h1 {\n    margin: 0;\n    padding: 0;\n    font-family: monospace\n  }\n`;\n\nconst Footer = styled.footer`\n  font-size: 10px;\n  padding: 10px 0px;\n`;\n\nexport const Container = styled.div`\n    background-color: #282c34;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    height: 100%;\n`;\n\nexport class App extends Component {\n  render() {\n    return (<Container>\n      <Header>\n        <h1>MasterMind!</h1>\n      </Header>\n      {routes}\n      <Footer>\n        <strong>madeBy @eatsjobs</strong>, 2019\n      </Footer>\n    </Container>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}