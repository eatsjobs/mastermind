{"version":3,"sources":["components/Inputs.jsx","components/Button.jsx","utils/generateSecretCode.js","screens/Game.jsx","utils/checkAttempt.js","screens/GameOver.jsx","screens/Home.jsx","routes.jsx","App.js","serviceWorker.js","index.js"],"names":["InputsContainer","styled","form","_templateObject","Inputs","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","evt","console","log","id","parseInt","target","dataset","newValues","toConsumableArray","state","values","value","length","setState","onSubmit","preventDefault","map","v","onEntered","initialValues","inherits","createClass","key","focus","prevProps","blur","_this2","readOnly","react_default","a","createElement","i","autoComplete","aria-label","concat","data-id","name","ref","node","type","min","max","Component","defaultProps","Button","button","Button_templateObject","generateSecretCode","_ref$difficulty","arguments","undefined","difficulty","code","push","Math","random","GameContainer","div","Game_templateObject","Table","table","_templateObject2","HeadRow","_templateObject3","Message","_templateObject4","Game","gotToGameOver","history","currentSecretCode","winning","onInputsEnter","_ref","_this$setState","location","_checkAttempt","attempt","input","slice","secret","whites","blacks","splice","j","k","rightNumberRightPlace","rightNumberWrongPlace","checkAttempt","defineProperty","remainingAttempts","currentRow","_this$props$location$","attempts","_this$props$location$2","maxAttempts","_this$state","style","textAlign","fontSize","Array","fill","_","className","width","Inputs_Inputs","display","flex","components_Button","onClick","GameOver","join","react_router_dom","to","Home","htmlFor","pathname","Routes","basename","process","react_router","exact","path","component","Header","header","App_templateObject","Footer","footer","App_templateObject2","Container","App_templateObject3","App","apply","routes","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b46b75d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst InputsContainer = styled.form`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    & input {\n        text-align: center;\n        font-family: monospace;\n        font-size: 1em;\n        max-width: 50px;\n        width: 100%;\n        background: transparent;\n        outline: none;\n        border: none;\n        border-bottom: 1px solid black;\n        margin: 0px 1.5px\n    }\n    \n    & input:focus {\n        border-bottom: 1px solid green;\n    }\n    & input:read-only {\n        background: gray;\n    }\n    & input[readonly] {\n        pointer-events: none;\n    }\n`\nexport class Inputs extends Component {\n    static defaultProps = {\n        readOnly: false,\n        initialValues: [],\n        focus: false\n    }\n    constructor(props) {\n        super(props);\n        this.state = {\n            values: this.props.initialValues\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.focus) {\n            this[`input0`].focus();\n        }\n    }\n\n    onChange = (evt) => {\n        console.log('change', evt);\n        const id = parseInt(evt.target.dataset.id);\n        let newValues = [\n            ...this.state.values\n        ];\n        \n        if (evt.target.value.length < 2) {\n            newValues[id] = evt.target.value;\n            this.setState({ values: newValues });\n        }    \n    }\n    \n    onSubmit = (evt) => {\n        evt.preventDefault();\n        const values = this.state.values.map((v) => parseInt(v, 10));\n        this.props.onEntered({ values, id: this.props.id });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.focus !== this.props.focus) {\n            if (this.props.focus) {\n                this[`input0`].focus();\n            } else {\n                this[`input0`].blur();\n            }\n        }\n    }\n\n    render() {\n        const { readOnly } = this.props;\n        const { values } = this.state;\n        return <InputsContainer\n            onSubmit={this.onSubmit}>\n            {values.map((v, i) => {\n                return <input\n                    autoComplete='off'\n                    aria-label={`input_${i}`}\n                    data-id={i}\n                    key={i}\n                    value={v}\n                    name={`input_${i}`}\n                    onChange={this.onChange}\n                    readOnly={readOnly}\n                    ref={(node) => this[`input${i}`] = node}\n                    type='number'\n                    min={0}\n                    max={9}\n                />\n            })}\n            <button type='submit'>check</button>\n        </InputsContainer>\n    }\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\nconst Button = styled.button`\n    border-radius: 3px;\n    padding: 0.5rem 0;\n    width: 11rem;\n    background: transparent;\n    color: white;\n    border: 2px solid white;\n`;\n\nexport default Button;","/**\n * @param {Object} params - the params\n * @param {Number} [params.difficulty=3] - the difficulty of the code\n * @returns {Array}\n */\nexport function generateSecretCode({ difficulty = 3 } = {}) {\n    let code = [];\n    for (let i = 0; i < difficulty; i++) {\n        code.push(parseInt((Math.random() * 9)));\n    }\n    return code;\n}","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nimport { Inputs, Button } from '../components';\nimport { checkAttempt, generateSecretCode } from '../utils';\n\nconst GameContainer = styled.div`\n  max-width: 700px;\n  min-height: 500px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow-x: auto;\n  \n`;\n\nconst Table = styled.table`\n    width: 100%;\n    min-height: 350px;\n    background: #7c8aa5;\n    padding: 1em 0em;\n    & tbody tr {\n        opacity: 0.35;\n    }\n    & tbody tr.active {\n        opacity: 1;\n    }\n\n    & tr td {\n\n    }\n\n    & tfoot tr td {\n        text-align: center;\n    }\n`;\n\nconst HeadRow = styled.div`\n    display: flex; \n    justify-content: space-between;\n    margin-bottom: 10px;\n`;\n\nconst Message = styled.div`\n    font-size: .8rem;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nexport default class Game extends Component {\n    constructor(props) {\n        super(props);\n        const { attempts, difficulty } = this.props.location.state;\n        this.state = {\n            currentRow: 0,\n            remainingAttempts: attempts,\n            currentSecretCode: generateSecretCode({ difficulty }),\n            winning: false\n        }\n    }\n\n    gotToGameOver = () => {\n        this.props.history.push('/gameover', { \n            code: this.state.currentSecretCode,\n            winning: this.state.winning\n        });\n    }\n    \n    onInputsEnter = ({ values, id }) => {\n        const { currentSecretCode } = this.state;\n        const { difficulty } = this.props.location.state;\n        const { rightNumberRightPlace, rightNumberWrongPlace } = checkAttempt({ \n            attempt: values, \n            code: this.state.currentSecretCode\n        });\n\n        console.log({ rightNumberRightPlace, rightNumberWrongPlace, currentSecretCode, difficulty },  rightNumberRightPlace === difficulty);\n        this.setState({\n            [id]: {\n                rightNumberRightPlace,\n                rightNumberWrongPlace,\n                readOnly: true\n            },\n            remainingAttempts: this.state.remainingAttempts - 1,\n            currentRow: this.state.currentRow + 1,\n            winning: rightNumberRightPlace === difficulty\n        }, () => {\n            if (this.state.winning || this.state.remainingAttempts === 0) {\n                this.gotToGameOver();\n            }\n        });\n    }\n\n    render() {\n        const { \n            difficulty, \n            attempts: maxAttempts \n        } = this.props.location.state;\n        const { currentRow, remainingAttempts, winning } = this.state;\n        return (<GameContainer>\n            <HeadRow>\n                <Message style={{ textAlign: 'left', fontSize: '.8rem' }}>\n                    Remaining Attempts {remainingAttempts}\n                </Message>\n            </HeadRow>\n            <Table>\n            <thead>\n                <tr>\n                    <th>Attempts</th>\n                    <th>\n                        Results:\n                        <div style={{ fontSize: '.7rem' }}>Right Number and Place | Wrong Place</div>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {new Array(maxAttempts).fill(1).map((_, i) => {\n                    return <tr className={currentRow === i ? 'active' : undefined} key={i}>\n                        <td style={{ width: '70%' }}>\n                            <Inputs\n                                focus={currentRow === i}\n                                initialValues={new Array(difficulty).fill(0)}\n                                id={`attempt_${i}`}\n                                onEntered={this.onInputsEnter} \n                                readOnly={currentRow !== i}\n                            />\n                        </td>\n                        <td style={{ width: '30%' }}>\n                            <div style={{ display: 'flex' }}>\n                                <span style={{ flex: 1, textAlign: 'center' }}>\n                                    {this.state[`attempt_${i}`] ? this.state[`attempt_${i}`].rightNumberRightPlace : 0}\n                                </span>\n                                <span style={{ flex: 1, textAlign: 'center' }}>\n                                    {this.state[`attempt_${i}`] ? this.state[`attempt_${i}`].rightNumberWrongPlace : 0}\n                                </span>\n                            </div>\n                        </td>\n                    </tr>\n                })}\n        </tbody>\n        <tfoot>\n            <tr>\n                <td style={{ width: '70%' }}>\n                    {/*<Inputs\n                        length={this.state.currentSecretCode.length}\n                        id='secret'\n                        readOnly={true}\n                    />*/}\n                </td>\n                <td style={{ width: '30%' }}>\n                    <Button \n                        onClick={this.gotToGameOver}>\n                        Show Solution\n                    </Button>\n                </td>\n            </tr>\n        </tfoot>\n        </Table>\n    </GameContainer>)\n    }\n}","/**\n * @param {Object} params\n * @param {Array} params.attempt - the user input code\n * @param {Array} params.code - the code generate once the game started\n */\nexport function checkAttempt({ attempt, code } = {}) {\n    let input = attempt.slice();\n    let secret = code.slice();\n    if (input.length !== secret.length) {\n        return false\n    }\n    let whites = 0, blacks = 0;\n    // console.log({ input, secret, blacks });\n    // blacks: right Number in right place\n    // whites: right number in wrong place\n    for (let i = secret.length -1; i >= 0; i--) {\n        if (input[i] === secret[i]) {\n            blacks++;\n            input.splice(i, 1);\n            secret.splice(i, 1);\n        }\n    }\n\n    //console.log({ input, secret, blacks });\n\n    for (let j = input.length -1; j >= 0; j--) {\n        for (let k = secret.length - 1; k >= 0; k--) {\n            if (input[j] === secret[k]) {\n                whites++;\n                secret.splice(k, 1);\n            }\n        }\n    }\n    //console.log({ input, secret, whites });\n    \n    return {\n        rightNumberRightPlace: blacks,\n        rightNumberWrongPlace: whites\n    }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nexport default class GameOver extends Component {\n  render() {\n    const { code, winning } = this.props.location.state;\n    return <div>\n      <div> You {winning ? 'WON!' : 'LOOSE'} Solution was: {code.join(' ')} </div>\n      <div>\n        <div>\n          <Link to='/'>Go To Home</Link>\n        </div>\n      </div>\n    </div>\n  }\n}","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      difficulty: 3,\n      attempts: 10\n    }\n  }\n\n  onChange = (evt) => {\n    this.setState({ \n      [evt.target.name]: \n      evt.target.value\n    });\n  }\n\n  render() {\n    const { difficulty, attempts } = this.state;\n    return <div>\n      <div>\n        <label htmlFor='difficulty'>\n          Difficulty:\n        </label>\n        <input\n          type='number'\n          min={3}\n          value={difficulty}\n          name='difficulty'\n          onChange={this.onChange}\n        />\n      </div>\n      <div>\n        <label htmlFor='attempts'>\n          Max attempts:\n        </label>\n        <input\n          type='number'\n          value={attempts}\n          min={3}\n          name='attempts'\n          onChange={this.onChange}\n        />\n      </div>\n      <div>\n        <Link to={{\n          pathname: '/play',\n          state: {\n            difficulty: parseInt(this.state.difficulty),\n            attempts: parseInt(this.state.attempts)\n          }\n        }}>Start</Link>\n      </div>\n    </div>\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Game, Home, GameOver } from './screens';\nconst Routes = (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route exact path='/' component={Home} />\n    <Route path='/play' component={Game} />\n    <Route path='/gameover' component={GameOver} />\n  </Router>\n);\n\nexport default Routes;","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport routes from './routes';\nconst Header = styled.header`\n  & h1 {\n    margin: 0;\n    padding: 0;\n    font-family: monospace\n  }\n`;\n\nconst Footer = styled.footer`\n  font-size: 10px;\n  padding: 10px 0px;\n`;\n\nexport const Container = styled.div`\n    background-color: #282c34;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-between;\n    font-size: calc(10px + 2vmin);\n    color: white;\n    height: 100%;\n`;\n\nexport class App extends Component {\n  render() {\n    return (<Container>\n      <Header>\n        <h1>MasterMind!</h1>\n      </Header>\n      {routes}\n      <Footer>\n        <strong>madeBy @eatsjobs</strong>, 2019\n      </Footer>\n    </Container>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}